// node_modules/@11labs/client/dist/lib.modern.js
function e() {
  return e = Object.assign ? Object.assign.bind() : function(e2) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var n2 = arguments[t2];
      for (var s2 in n2) ({}).hasOwnProperty.call(n2, s2) && (e2[s2] = n2[s2]);
    }
    return e2;
  }, e.apply(null, arguments);
}
function t(e2) {
  const t2 = new Uint8Array(e2);
  return window.btoa(String.fromCharCode(...t2));
}
function n(e2) {
  const t2 = window.atob(e2), n2 = t2.length, s2 = new Uint8Array(n2);
  for (let e3 = 0; e3 < n2; e3++) s2[e3] = t2.charCodeAt(e3);
  return s2.buffer;
}
var s = /* @__PURE__ */ new Map();
function a(e2, t2) {
  return async (n2) => {
    const a2 = s.get(e2);
    if (a2) return n2.addModule(a2);
    const o2 = new Blob([t2], { type: "application/javascript" }), i2 = URL.createObjectURL(o2);
    try {
      return await n2.addModule(i2), void s.set(e2, i2);
    } catch (e3) {
      URL.revokeObjectURL(i2);
    }
    try {
      const a3 = `data:application/javascript;base64,${btoa(t2)}`;
      await n2.addModule(a3), s.set(e2, a3);
    } catch (t3) {
      throw new Error(`Failed to load the ${e2} worklet module. Make sure the browser supports AudioWorklets.`);
    }
  };
}
var o = a("raw-audio-processor", `
const BIAS = 0x84;
const CLIP = 32635;
const encodeTable = [
  0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,
  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
];

function encodeSample(sample) {
  let sign;
  let exponent;
  let mantissa;
  let muLawSample;
  sign = (sample >> 8) & 0x80;
  if (sign !== 0) sample = -sample;
  sample = sample + BIAS;
  if (sample > CLIP) sample = CLIP;
  exponent = encodeTable[(sample>>7) & 0xFF];
  mantissa = (sample >> (exponent+3)) & 0x0F;
  muLawSample = ~(sign | (exponent << 4) | mantissa);
  
  return muLawSample;
}

class RawAudioProcessor extends AudioWorkletProcessor {
  constructor() {
    super();
              
    this.port.onmessage = ({ data }) => {
      switch (data.type) {
        case "setFormat":
          this.isMuted = false;
          this.buffer = []; // Initialize an empty buffer
          this.bufferSize = data.sampleRate / 4;
          this.format = data.format;

          if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {
            globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {
              this.resampler = resampler;
            });
          }
          break;
        case "setMuted":
          this.isMuted = data.isMuted;
          break;
      }
    };
  }
  process(inputs) {
    if (!this.buffer) {
      return true;
    }
    
    const input = inputs[0]; // Get the first input node
    if (input.length > 0) {
      let channelData = input[0]; // Get the first channel's data

      // Resample the audio if necessary
      if (this.resampler) {
        channelData = this.resampler.full(channelData);
      }

      // Add channel data to the buffer
      this.buffer.push(...channelData);
      // Get max volume 
      let sum = 0.0;
      for (let i = 0; i < channelData.length; i++) {
        sum += channelData[i] * channelData[i];
      }
      const maxVolume = Math.sqrt(sum / channelData.length);
      // Check if buffer size has reached or exceeded the threshold
      if (this.buffer.length >= this.bufferSize) {
        const float32Array = this.isMuted 
          ? new Float32Array(this.buffer.length)
          : new Float32Array(this.buffer);

        let encodedArray = this.format === "ulaw"
          ? new Uint8Array(float32Array.length)
          : new Int16Array(float32Array.length);

        // Iterate through the Float32Array and convert each sample to PCM16
        for (let i = 0; i < float32Array.length; i++) {
          // Clamp the value to the range [-1, 1]
          let sample = Math.max(-1, Math.min(1, float32Array[i]));

          // Scale the sample to the range [-32768, 32767]
          let value = sample < 0 ? sample * 32768 : sample * 32767;
          if (this.format === "ulaw") {
            value = encodeSample(Math.round(value));
          }

          encodedArray[i] = value;
        }

        // Send the buffered data to the main script
        this.port.postMessage([encodedArray, maxVolume]);

        // Clear the buffer after sending
        this.buffer = [];
      }
    }
    return true; // Continue processing
  }
}
registerProcessor("raw-audio-processor", RawAudioProcessor);
`);
function i() {
  return ["iPad Simulator", "iPhone Simulator", "iPod Simulator", "iPad", "iPhone", "iPod"].includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document;
}
var r = class _r {
  static async create({ sampleRate: e2, format: t2, preferHeadphonesForIosDevices: n2 }) {
    let s2 = null, a2 = null;
    try {
      const l3 = { sampleRate: { ideal: e2 }, echoCancellation: { ideal: true }, noiseSuppression: { ideal: true } };
      if (i() && n2) {
        const e3 = (await window.navigator.mediaDevices.enumerateDevices()).find((e4) => "audioinput" === e4.kind && ["airpod", "headphone", "earphone"].find((t3) => e4.label.toLowerCase().includes(t3)));
        e3 && (l3.deviceId = { ideal: e3.deviceId });
      }
      const c3 = navigator.mediaDevices.getSupportedConstraints().sampleRate;
      s2 = new window.AudioContext(c3 ? { sampleRate: e2 } : {});
      const u2 = s2.createAnalyser();
      c3 || await s2.audioWorklet.addModule("https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js"), await o(s2.audioWorklet), a2 = await navigator.mediaDevices.getUserMedia({ audio: l3 });
      const d2 = s2.createMediaStreamSource(a2), h2 = new AudioWorkletNode(s2, "raw-audio-processor");
      return h2.port.postMessage({ type: "setFormat", format: t2, sampleRate: e2 }), d2.connect(u2), u2.connect(h2), await s2.resume(), new _r(s2, u2, h2, a2);
    } catch (e3) {
      var l2, c2;
      throw null == (l2 = a2) || l2.getTracks().forEach((e4) => e4.stop()), null == (c2 = s2) || c2.close(), e3;
    }
  }
  constructor(e2, t2, n2, s2) {
    this.context = void 0, this.analyser = void 0, this.worklet = void 0, this.inputStream = void 0, this.context = e2, this.analyser = t2, this.worklet = n2, this.inputStream = s2;
  }
  async close() {
    this.inputStream.getTracks().forEach((e2) => e2.stop()), await this.context.close();
  }
  setMuted(e2) {
    this.worklet.port.postMessage({ type: "setMuted", isMuted: e2 });
  }
};
var l = a("audio-concat-processor", '\nconst decodeTable = [0,132,396,924,1980,4092,8316,16764];\n\nexport function decodeSample(muLawSample) {\n  let sign;\n  let exponent;\n  let mantissa;\n  let sample;\n  muLawSample = ~muLawSample;\n  sign = (muLawSample & 0x80);\n  exponent = (muLawSample >> 4) & 0x07;\n  mantissa = muLawSample & 0x0F;\n  sample = decodeTable[exponent] + (mantissa << (exponent+3));\n  if (sign !== 0) sample = -sample;\n\n  return sample;\n}\n\nclass AudioConcatProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n    this.buffers = []; // Initialize an empty buffer\n    this.cursor = 0;\n    this.currentBuffer = null;\n    this.wasInterrupted = false;\n    this.finished = false;\n    \n    this.port.onmessage = ({ data }) => {\n      switch (data.type) {\n        case "setFormat":\n          this.format = data.format;\n          break;\n        case "buffer":\n          this.wasInterrupted = false;\n          this.buffers.push(\n            this.format === "ulaw"\n              ? new Uint8Array(data.buffer)\n              : new Int16Array(data.buffer)\n          );\n          break;\n        case "interrupt":\n          this.wasInterrupted = true;\n          break;\n        case "clearInterrupted":\n          if (this.wasInterrupted) {\n            this.wasInterrupted = false;\n            this.buffers = [];\n            this.currentBuffer = null;\n          }\n      }\n    };\n  }\n  process(_, outputs) {\n    let finished = false;\n    const output = outputs[0][0];\n    for (let i = 0; i < output.length; i++) {\n      if (!this.currentBuffer) {\n        if (this.buffers.length === 0) {\n          finished = true;\n          break;\n        }\n        this.currentBuffer = this.buffers.shift();\n        this.cursor = 0;\n      }\n\n      let value = this.currentBuffer[this.cursor];\n      if (this.format === "ulaw") {\n        value = decodeSample(value);\n      }\n      output[i] = value / 32768;\n      this.cursor++;\n\n      if (this.cursor >= this.currentBuffer.length) {\n        this.currentBuffer = null;\n      }\n    }\n\n    if (this.finished !== finished) {\n      this.finished = finished;\n      this.port.postMessage({ type: "process", finished });\n    }\n\n    return true; // Continue processing\n  }\n}\n\nregisterProcessor("audio-concat-processor", AudioConcatProcessor);\n');
var c = class _c {
  static async create({ sampleRate: e2, format: t2 }) {
    let n2 = null;
    try {
      n2 = new AudioContext({ sampleRate: e2 });
      const s3 = n2.createAnalyser(), a2 = n2.createGain();
      a2.connect(s3), s3.connect(n2.destination), await l(n2.audioWorklet);
      const o2 = new AudioWorkletNode(n2, "audio-concat-processor");
      return o2.port.postMessage({ type: "setFormat", format: t2 }), o2.connect(a2), await n2.resume(), new _c(n2, s3, a2, o2);
    } catch (e3) {
      var s2;
      throw null == (s2 = n2) || s2.close(), e3;
    }
  }
  constructor(e2, t2, n2, s2) {
    this.context = void 0, this.analyser = void 0, this.gain = void 0, this.worklet = void 0, this.context = e2, this.analyser = t2, this.gain = n2, this.worklet = s2;
  }
  async close() {
    await this.context.close();
  }
};
function u(e2) {
  return !!e2.type;
}
var d = class _d {
  static async create(e2) {
    let t2 = null;
    try {
      var n2;
      const s3 = null != (n2 = e2.origin) ? n2 : "wss://api.elevenlabs.io", a2 = e2.signedUrl ? e2.signedUrl : s3 + "/v1/convai/conversation?agent_id=" + e2.agentId, o2 = ["convai"];
      e2.authorization && o2.push(`bearer.${e2.authorization}`), t2 = new WebSocket(a2, o2);
      const i2 = await new Promise((n3, s4) => {
        t2.addEventListener("open", () => {
          var n4;
          const s5 = { type: "conversation_initiation_client_data" };
          var a3, o3, i3, r3;
          e2.overrides && (s5.conversation_config_override = { agent: { prompt: null == (a3 = e2.overrides.agent) ? void 0 : a3.prompt, first_message: null == (o3 = e2.overrides.agent) ? void 0 : o3.firstMessage, language: null == (i3 = e2.overrides.agent) ? void 0 : i3.language }, tts: { voice_id: null == (r3 = e2.overrides.tts) ? void 0 : r3.voiceId } }), e2.customLlmExtraBody && (s5.custom_llm_extra_body = e2.customLlmExtraBody), e2.dynamicVariables && (s5.dynamic_variables = e2.dynamicVariables), null == (n4 = t2) || n4.send(JSON.stringify(s5));
        }, { once: true }), t2.addEventListener("error", (e3) => {
          setTimeout(() => s4(e3), 0);
        }), t2.addEventListener("close", s4), t2.addEventListener("message", (e3) => {
          const t3 = JSON.parse(e3.data);
          u(t3) && ("conversation_initiation_metadata" === t3.type ? n3(t3.conversation_initiation_metadata_event) : console.warn("First received message is not conversation metadata."));
        }, { once: true });
      }), { conversation_id: r2, agent_output_audio_format: l2, user_input_audio_format: c2 } = i2, p2 = h(null != c2 ? c2 : "pcm_16000"), m2 = h(l2);
      return new _d(t2, r2, p2, m2);
    } catch (e3) {
      var s2;
      throw null == (s2 = t2) || s2.close(), e3;
    }
  }
  constructor(e2, t2, n2, s2) {
    this.socket = void 0, this.conversationId = void 0, this.inputFormat = void 0, this.outputFormat = void 0, this.queue = [], this.disconnectionDetails = null, this.onDisconnectCallback = null, this.onMessageCallback = null, this.socket = e2, this.conversationId = t2, this.inputFormat = n2, this.outputFormat = s2, this.socket.addEventListener("error", (e3) => {
      setTimeout(() => this.disconnect({ reason: "error", message: "The connection was closed due to a socket error.", context: e3 }), 0);
    }), this.socket.addEventListener("close", (e3) => {
      this.disconnect(1e3 === e3.code ? { reason: "agent", context: e3 } : { reason: "error", message: e3.reason || "The connection was closed by the server.", context: e3 });
    }), this.socket.addEventListener("message", (e3) => {
      try {
        const t3 = JSON.parse(e3.data);
        if (!u(t3)) return;
        this.onMessageCallback ? this.onMessageCallback(t3) : this.queue.push(t3);
      } catch (e4) {
      }
    });
  }
  close() {
    this.socket.close();
  }
  sendMessage(e2) {
    this.socket.send(JSON.stringify(e2));
  }
  onMessage(e2) {
    this.onMessageCallback = e2, this.queue.forEach(e2), this.queue = [];
  }
  onDisconnect(e2) {
    this.onDisconnectCallback = e2, this.disconnectionDetails && e2(this.disconnectionDetails);
  }
  disconnect(e2) {
    var t2;
    this.disconnectionDetails || (this.disconnectionDetails = e2, null == (t2 = this.onDisconnectCallback) || t2.call(this, e2));
  }
};
function h(e2) {
  const [t2, n2] = e2.split("_");
  if (!["pcm", "ulaw"].includes(t2)) throw new Error(`Invalid format: ${e2}`);
  const s2 = parseInt(n2);
  if (isNaN(s2)) throw new Error(`Invalid sample rate: ${n2}`);
  return { format: t2, sampleRate: s2 };
}
var p = { clientTools: {} };
var m = { onConnect: () => {
}, onDebug: () => {
}, onDisconnect: () => {
}, onError: () => {
}, onMessage: () => {
}, onAudio: () => {
}, onModeChange: () => {
}, onStatusChange: () => {
}, onCanSendFeedbackChange: () => {
} };
var f = class _f {
  static async startSession(t2) {
    var n2;
    const s2 = e({}, p, m, t2);
    s2.onStatusChange({ status: "connecting" }), s2.onCanSendFeedbackChange({ canSendFeedback: false });
    let a2 = null, o2 = null, l2 = null, u2 = null, h2 = null;
    if (null == (n2 = t2.useWakeLock) || n2) try {
      h2 = await navigator.wakeLock.request("screen");
    } catch (e2) {
    }
    try {
      var g2, v;
      u2 = await navigator.mediaDevices.getUserMedia({ audio: true });
      const n3 = null != (g2 = t2.connectionDelay) ? g2 : { default: 0, android: 3e3 };
      let p2 = n3.default;
      var w;
      if (/android/i.test(navigator.userAgent)) p2 = null != (w = n3.android) ? w : p2;
      else if (i()) {
        var y;
        p2 = null != (y = n3.ios) ? y : p2;
      }
      return p2 > 0 && await new Promise((e2) => setTimeout(e2, p2)), o2 = await d.create(t2), [a2, l2] = await Promise.all([r.create(e({}, o2.inputFormat, { preferHeadphonesForIosDevices: t2.preferHeadphonesForIosDevices })), c.create(o2.outputFormat)]), null == (v = u2) || v.getTracks().forEach((e2) => e2.stop()), u2 = null, new _f(s2, o2, a2, l2, h2);
    } catch (e2) {
      var _, b, k, M;
      s2.onStatusChange({ status: "disconnected" }), null == (_ = u2) || _.getTracks().forEach((e3) => e3.stop()), null == (b = o2) || b.close(), await (null == (k = a2) ? void 0 : k.close()), await (null == (M = l2) ? void 0 : M.close());
      try {
        var S;
        await (null == (S = h2) ? void 0 : S.release()), h2 = null;
      } catch (e3) {
      }
      throw e2;
    }
  }
  constructor(e2, s2, a2, o2, i2) {
    var r2 = this;
    this.options = void 0, this.connection = void 0, this.input = void 0, this.output = void 0, this.wakeLock = void 0, this.lastInterruptTimestamp = 0, this.mode = "listening", this.status = "connecting", this.inputFrequencyData = void 0, this.outputFrequencyData = void 0, this.volume = 1, this.currentEventId = 1, this.lastFeedbackEventId = 1, this.canSendFeedback = false, this.endSession = () => this.endSessionWithDetails({ reason: "user" }), this.endSessionWithDetails = async function(e3) {
      if ("connected" === r2.status || "connecting" === r2.status) {
        r2.updateStatus("disconnecting");
        try {
          var t2;
          await (null == (t2 = r2.wakeLock) ? void 0 : t2.release()), r2.wakeLock = null;
        } catch (e4) {
        }
        r2.connection.close(), await r2.input.close(), await r2.output.close(), r2.updateStatus("disconnected"), r2.options.onDisconnect(e3);
      }
    }, this.updateMode = (e3) => {
      e3 !== this.mode && (this.mode = e3, this.options.onModeChange({ mode: e3 }));
    }, this.updateStatus = (e3) => {
      e3 !== this.status && (this.status = e3, this.options.onStatusChange({ status: e3 }));
    }, this.updateCanSendFeedback = () => {
      const e3 = this.currentEventId !== this.lastFeedbackEventId;
      this.canSendFeedback !== e3 && (this.canSendFeedback = e3, this.options.onCanSendFeedbackChange({ canSendFeedback: e3 }));
    }, this.onMessage = async function(e3) {
      switch (e3.type) {
        case "interruption":
          return e3.interruption_event && (r2.lastInterruptTimestamp = e3.interruption_event.event_id), void r2.fadeOutAudio();
        case "agent_response":
          return void r2.options.onMessage({ source: "ai", message: e3.agent_response_event.agent_response });
        case "user_transcript":
          return void r2.options.onMessage({ source: "user", message: e3.user_transcription_event.user_transcript });
        case "internal_tentative_agent_response":
          return void r2.options.onDebug({ type: "tentative_agent_response", response: e3.tentative_agent_response_internal_event.tentative_agent_response });
        case "client_tool_call":
          if (r2.options.clientTools.hasOwnProperty(e3.client_tool_call.tool_name)) try {
            var t2;
            const n2 = null != (t2 = await r2.options.clientTools[e3.client_tool_call.tool_name](e3.client_tool_call.parameters)) ? t2 : "Client tool execution successful.", s3 = "object" == typeof n2 ? JSON.stringify(n2) : String(n2);
            r2.connection.sendMessage({ type: "client_tool_result", tool_call_id: e3.client_tool_call.tool_call_id, result: s3, is_error: false });
          } catch (t3) {
            r2.onError("Client tool execution failed with following error: " + (null == t3 ? void 0 : t3.message), { clientToolName: e3.client_tool_call.tool_name }), r2.connection.sendMessage({ type: "client_tool_result", tool_call_id: e3.client_tool_call.tool_call_id, result: "Client tool execution failed: " + (null == t3 ? void 0 : t3.message), is_error: true });
          }
          else {
            if (r2.options.onUnhandledClientToolCall) return void r2.options.onUnhandledClientToolCall(e3.client_tool_call);
            r2.onError(`Client tool with name ${e3.client_tool_call.tool_name} is not defined on client`, { clientToolName: e3.client_tool_call.tool_name }), r2.connection.sendMessage({ type: "client_tool_result", tool_call_id: e3.client_tool_call.tool_call_id, result: `Client tool with name ${e3.client_tool_call.tool_name} is not defined on client`, is_error: true });
          }
          return;
        case "audio":
          return void (r2.lastInterruptTimestamp <= e3.audio_event.event_id && (r2.options.onAudio(e3.audio_event.audio_base_64), r2.addAudioBase64Chunk(e3.audio_event.audio_base_64), r2.currentEventId = e3.audio_event.event_id, r2.updateCanSendFeedback(), r2.updateMode("speaking")));
        case "ping":
          return void r2.connection.sendMessage({ type: "pong", event_id: e3.ping_event.event_id });
        default:
          return void r2.options.onDebug(e3);
      }
    }, this.onInputWorkletMessage = (e3) => {
      "connected" === this.status && this.connection.sendMessage({ user_audio_chunk: t(e3.data[0].buffer) });
    }, this.onOutputWorkletMessage = ({ data: e3 }) => {
      "process" === e3.type && this.updateMode(e3.finished ? "listening" : "speaking");
    }, this.addAudioBase64Chunk = (e3) => {
      this.output.gain.gain.value = this.volume, this.output.worklet.port.postMessage({ type: "clearInterrupted" }), this.output.worklet.port.postMessage({ type: "buffer", buffer: n(e3) });
    }, this.fadeOutAudio = () => {
      this.updateMode("listening"), this.output.worklet.port.postMessage({ type: "interrupt" }), this.output.gain.gain.exponentialRampToValueAtTime(1e-4, this.output.context.currentTime + 2), setTimeout(() => {
        this.output.gain.gain.value = this.volume, this.output.worklet.port.postMessage({ type: "clearInterrupted" });
      }, 2e3);
    }, this.onError = (e3, t2) => {
      console.error(e3, t2), this.options.onError(e3, t2);
    }, this.calculateVolume = (e3) => {
      if (0 === e3.length) return 0;
      let t2 = 0;
      for (let n2 = 0; n2 < e3.length; n2++) t2 += e3[n2] / 255;
      return t2 /= e3.length, t2 < 0 ? 0 : t2 > 1 ? 1 : t2;
    }, this.getId = () => this.connection.conversationId, this.isOpen = () => "connected" === this.status, this.setVolume = ({ volume: e3 }) => {
      this.volume = e3;
    }, this.setMicMuted = (e3) => {
      this.input.setMuted(e3);
    }, this.getInputByteFrequencyData = () => (null != this.inputFrequencyData || (this.inputFrequencyData = new Uint8Array(this.input.analyser.frequencyBinCount)), this.input.analyser.getByteFrequencyData(this.inputFrequencyData), this.inputFrequencyData), this.getOutputByteFrequencyData = () => (null != this.outputFrequencyData || (this.outputFrequencyData = new Uint8Array(this.output.analyser.frequencyBinCount)), this.output.analyser.getByteFrequencyData(this.outputFrequencyData), this.outputFrequencyData), this.getInputVolume = () => this.calculateVolume(this.getInputByteFrequencyData()), this.getOutputVolume = () => this.calculateVolume(this.getOutputByteFrequencyData()), this.sendFeedback = (e3) => {
      this.canSendFeedback ? (this.connection.sendMessage({ type: "feedback", score: e3 ? "like" : "dislike", event_id: this.currentEventId }), this.lastFeedbackEventId = this.currentEventId, this.updateCanSendFeedback()) : console.warn(0 === this.lastFeedbackEventId ? "Cannot send feedback: the conversation has not started yet." : "Cannot send feedback: feedback has already been sent for the current response.");
    }, this.sendContextualUpdate = (e3) => {
      this.connection.sendMessage({ type: "contextual_update", text: e3 });
    }, this.sendUserMessage = (e3) => {
      this.connection.sendMessage({ type: "user_message", text: e3 });
    }, this.sendUserActivity = () => {
      this.connection.sendMessage({ type: "user_activity" });
    }, this.options = e2, this.connection = s2, this.input = a2, this.output = o2, this.wakeLock = i2, this.options.onConnect({ conversationId: s2.conversationId }), this.connection.onDisconnect(this.endSessionWithDetails), this.connection.onMessage(this.onMessage), this.input.worklet.port.onmessage = this.onInputWorkletMessage, this.output.worklet.port.onmessage = this.onOutputWorkletMessage, this.updateStatus("connected");
  }
};
function g(e2, t2, n2 = "https://api.elevenlabs.io") {
  return fetch(`${n2}/v1/convai/conversations/${e2}/feedback`, { method: "POST", body: JSON.stringify({ feedback: t2 ? "like" : "dislike" }), headers: { "Content-Type": "application/json" } });
}
export {
  f as Conversation,
  g as postOverallFeedback
};
//# sourceMappingURL=@11labs_client.js.map
